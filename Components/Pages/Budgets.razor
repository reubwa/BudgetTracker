@page "/budgets"
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>Budgets</PageTitle>
<h3>Budgets</h3>
<style>
    td, table {
        padding: 7px;
    }

    button {
        border: none;
        padding: 7px;
    }

    input, select {
        margin-bottom: 15px;
        height: 30px;
    }

    .mdLbl {
        margin-bottom: 5px;
    }
</style>
<table>
    <tr>
        <td>
            <div class="btn-group" role="toolbar">
                <button class="btn-primary" style="border-bottom-left-radius: 5px;border-top-left-radius: 5px;" @onclick="() => mdAddBudget.Open()">Add</button>
                <button class="btn-secondary" @onclick="prepUpdateBudget">Update</button>
                <button class="btn-secondary" @onclick="() => mdUpdateSpending.Open()">Update Spending</button>
                <button class="btn-danger" style="border-bottom-right-radius: 5px;border-top-right-radius: 5px;" @onclick="DeleteSelected">Delete</button>
            </div>
        </td>
    </tr>
</table>
<table>
    @foreach(var instance in DB.budgetTable)
    {
        <tr id="row.@instance.id">
            <td><input type="checkbox" id="row.cb.@instance.id" @onchange="() => cbxSelected(instance.id)"/></td>
            <td><h4>@instance.name</h4></td>
        </tr>
    }
</table>
<ModalDialog @ref="@mdAddBudget" Title="Add Budget">
    <div class="row" style="margin-left:10px;margin-right:10px;">
        <label for="tbName" class="mdLbl">Name</label>
        <input id="tbName" @bind="@newName"/>
        <label for="tbStartingAmount" class="mdLbl">Starting Amount</label>
        <input id="tbStartingAmount" type="number" @bind="@initStartingAmount"/>
        <hr>
        <label for="ddGoal" class="mdLbl">Goal</label>
        <select id="ddGoal" @bind-value="@newGoalId">
            @foreach (var goal in DB.goalTable)
            {
                <option value="@goal.id">@goal.name</option>
            }
        </select>
        <div class="btn-group" role="toolbar" style="margin-top:15px;padding:12px;">
            <button class="btn-primary" style="border-bottom-left-radius: 5px;border-top-left-radius: 5px;width:50%;" @onclick="AddBudget">Add</button>
            <button class="btn btn-outline-secondary" @onclick="() => mdAddBudget.Close()" style="border-bottom-right-radius: 5px;border-top-right-radius: 5px;">Close</button>
        </div>
    </div>
</ModalDialog>
<ModalDialog @ref="@mdUpdateBudget" Title="Update Budget">
    <div class="row" style="margin-left:10px;margin-right:10px;">
        <label for="tbName" class="mdLbl">Name</label>
        <input id="tbName" @bind="@newName"/>
        <label for="tbStartingAmount" class="mdLbl">Starting Amount</label>
        <input id="tbStartingAmount" type="number" @bind="@initStartingAmount"/>
        <hr>
        <label for="ddGoal" class="mdLbl">Goal</label>
        <select id="ddGoal" @bind-value="@newGoalId">
            @foreach (var goal in DB.goalTable)
            {
                <option value="@goal.id">@goal.name</option>
            }
        </select>
        <div class="btn-group" role="toolbar" style="margin-top:15px;padding:12px;">
            <button class="btn-primary" style="border-bottom-left-radius: 5px;border-top-left-radius: 5px;width:50%;" @onclick="updateBudget">Add</button>
            <button class="btn btn-outline-secondary" @onclick="() => mdUpdateBudget.Close()" style="border-bottom-right-radius: 5px;border-top-right-radius: 5px;">Close</button>
        </div>
    </div>
</ModalDialog>
@code {
    private ModalDialog mdAddBudget { get; set; }
    private ModalDialog mdUpdateBudget { get; set; }
    private ModalDialog mdUpdateSpending { get; set; }
    private List<Budget> toRemove { get; set; }
    private void cbxSelected(long budgetID)
    {
        if (toRemove.Contains(new Budget() { id = budgetID }))
        {
            toRemove.Remove(toRemove.Find(x => x.id == budgetID));
        }
        else
        {
            toRemove.Add(toRemove.Find(x => x.id == budgetID));
        }
    }
    private void DeleteSelected()
    {
        foreach(var budget in toRemove)
        {
            SQLite.deleteItem(budget);
        }
        toRemove.Clear();
        StateHasChanged();
    }
    private string newName { get; set; }
    private double newStartingAmount { get; set; }
    private int newGoalId { get; set; }
    private long updId { get; set; }
    private string initStartingAmount { get; set; }

    private void prepStartingAmount()
    {
        newStartingAmount = double.Parse(initStartingAmount);
    }

    private void AddBudget()
    {
        prepStartingAmount();
        Budget newBudget = new Budget { goalID = newGoalId, name = newName, startingAmount = newStartingAmount };
        DB.budgetTable.Add(newBudget);
        SQLite.writeData();
        mdAddBudget.Close();
        StateHasChanged();
    }

    private void prepUpdateBudget()
    {
        if (toRemove.Count == 1)
        {
            updId = toRemove[0].id;
            newName = toRemove[0].name;
            initStartingAmount = toRemove[0].startingAmount.ToString();
            newGoalId = toRemove[0].goalID;
            mdUpdateBudget.Open();
        }
    }

    private void updateBudget()
    {
        prepStartingAmount();
        Budget updBudget = new Budget() { id=updId,goalID = newGoalId,name = newName,startingAmount = newStartingAmount};
        SQLite.updateItem(updBudget);
        mdUpdateBudget.Close();
        StateHasChanged();
    }
}
