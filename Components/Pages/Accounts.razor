@page "/accounts"
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@using BudgetTracker
@attribute [Authorize]
<PageTitle>Accounts</PageTitle>
<h3>Accounts</h3>
<style>
    td, table {
        padding: 7px;
    }

    button {
        border: none;
        padding: 7px;
    }

    input, select {
        margin-bottom: 15px;
        height: 30px;
    }

    .mdLbl {
        margin-bottom: 5px;
    }
</style>
<table>
    <tr>
        <td>
            <div class="btn-group" role="toolbar">
                <button class="btn-primary" style="border-bottom-left-radius: 5px;border-top-left-radius: 5px;" @onclick="NewAccount">Add</button>
                <button class="btn-secondary" @onclick="prepUpdate">Update</button>
                <button class="btn-danger" style="border-bottom-right-radius: 5px;border-top-right-radius: 5px;" @onclick="DeleteSelected">Delete</button>
            </div>
        </td>
    </tr>
</table>
<table>
    @foreach(var instance in DB.accountTable)
    {
        <tr id="row.@instance.id">
            <td><input id="row.cb.@instance.id" type="checkbox" @onchange="() => cbxSelected(instance.id)" /></td>
            <td>
                <table>
                    <tr><td style="padding:0px;"><h4>@instance.name</h4></td></tr>
                    <tr><td style="padding:0px;"><h4>£@instance.balance</h4></td></tr>
                </table>
            </td>
            <td><h6>@instance.type</h6></td>
        </tr>
    }
</table>
<ModalDialog @ref="@Globals.mdAddAccount" Title="Add Account">
    <div class="row" style="margin-left:10px;margin-right:10px;">
        <label for="tbName" class="mdLbl">Name</label>
        <input id="tbName" @bind="@Globals.newName"/>
        <label for="tbInterestRate" class="mdLbl">Interest Rate</label>
        <input id="tbInterestRate" type="number" @bind="@Globals.newInterestRate"/>
        <label for="ddType" class="mdLbl">Type</label>
        <select id="ddType" @bind="@Globals.newType">
            <option value="Current">Current Account</option>
            <option value="Savings">Savings Account</option>
        </select>
        <hr>
        <label for="tbBalance" class="mdLbl">Balance</label>
        <input id="tbBalance" type="number" @bind="@Globals.newBalance"/>
        <div class="btn-group" role="toolbar" style="margin-top:15px;padding:12px;">
            <button class="btn-primary" style="border-bottom-left-radius: 5px;border-top-left-radius: 5px;width:50%;" @onclick="NewAccount">Add</button>
            <button class="btn btn-outline-secondary" @onclick="() => Globals.mdAddAccount.Close()" style="border-bottom-right-radius: 5px;border-top-right-radius: 5px;">Close</button>
        </div>
    </div>
</ModalDialog>
<ModalDialog @ref="@Globals.mdUpdateAccount" Title="Update Account">
    <div class="row" style="margin-left:10px;margin-right:10px;">
        <label for="tbName" class="mdLbl">Name</label>
        <input id="tbName" @bind="@Globals.updName" />
        <label for="tbInterestRate" class="mdLbl">Interest Rate</label>
        <input id="tbInterestRate" type="number" @bind="@Globals.updInterestRate" />
        <label for="ddType" class="mdLbl">Type</label>
        <select id="ddType" @bind="@Globals.updType">
            <option value="Current">Current Account</option>
            <option value="Savings">Savings Account</option>
        </select>
        <hr>
        <label for="tbBalance" class="mdLbl">Balance</label>
        <input id="tbBalance" type="number" @bind="@Globals.updBalance" />
        <div class="btn-group" role="toolbar" style="margin-top:15px;padding:12px;">
            <button class="btn-primary" style="border-bottom-left-radius: 5px;border-top-left-radius: 5px;width:50%;" @onclick="NewAccount">Add</button>
            <button class="btn btn-outline-secondary" @onclick="() => Globals.mdUpdateAccount.Close())" style="border-bottom-right-radius: 5px;border-top-right-radius: 5px;">Close</button>
        </div>
    </div>
</ModalDialog>
@code {

    public static class Globals
    {
        public static BudgetTracker.Components.ModalDialog mdAddAccount { get; set; }
        public static BudgetTracker.Components.ModalDialog mdUpdateAccount { get; set; }
        public static List<BudgetTracker.Account> toRemove { get; set; }
        public static string newName { get; set; }
        public static double newInterestRate { get; set; }
        public static double newBalance { get; set; }
        public static string newType { get; set; }
        public static long updID { get; set; }
        public static string updName { get; set; }
        public static double updInterestRate { get; set; }
        public static double updBalance { get; set; }
        public static string updType { get; set; }
    }
    private void cbxSelected(long accountID)
    {
        if (Globals.toRemove.Contains(new Account() { id = accountID }))
        {
            Globals.toRemove.Remove(Globals.toRemove.Find(x => x.id == accountID));
        }
        else
        {
            Globals.toRemove.Add(Globals.toRemove.Find(x => x.id == accountID));
        }
    }
    private void NewAccount()
    {
        Account newAccount = new Account { name = Globals.newName, balance = Globals.newBalance, interestRate = Globals.newInterestRate, type = Globals.newType};
        DB.accountTable.Add(newAccount);
        SQLite.writeData();
        Globals.mdAddAccount.Close();
        StateHasChanged();
    }
    private void DeleteSelected()
    {
        foreach(var account in Globals.toRemove)
        {
            SQLite.deleteItem(account);
        }
        Globals.toRemove.Clear();
        StateHasChanged();
    }
    private void UpdateAccount()
    {
        Account updAccount = new Account { name = Globals.updName, balance = Globals.updBalance, interestRate = Globals.updInterestRate, type = Globals.updType, id = Globals.updID };
        SQLite.updateItem(updAccount);
        Globals.mdUpdateAccount.Close();
        StateHasChanged();
    }
    private void prepUpdate()
    {
        if(Globals.toRemove.Count==1)
        {
            Globals.updID = Globals.toRemove[0].id;
            Globals.updName = Globals.toRemove[0].name;
            Globals.updBalance = Globals.toRemove[0].balance;
            Globals.updInterestRate = Globals.toRemove[0].interestRate;
            Globals.updType = Globals.toRemove[0].type;
            Globals.mdUpdateAccount.Open();
        }
    }
}
