@page "/accounts"
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@attribute [Authorize]
<PageTitle>Accounts</PageTitle>
<h3>Accounts</h3>
<style>
    td, table {
        padding: 7px;
    }

    button {
        border: none;
        padding: 7px;
    }

    input, select {
        margin-bottom: 15px;
        height: 30px;
    }

    .mdLbl {
        margin-bottom: 5px;
    }
</style>
<table>
    <tr>
        <td>
            <div class="btn-group" role="toolbar">
                <button class="btn-primary" style="border-bottom-left-radius: 5px;border-top-left-radius: 5px;" @onclick="NewAccount">Add</button>
                <button class="btn-secondary" @onclick="prepUpdate">Update</button>
                <button class="btn-danger" style="border-bottom-right-radius: 5px;border-top-right-radius: 5px;" @onclick="DeleteSelected">Delete</button>
            </div>
        </td>
    </tr>
</table>
<table>
    @foreach(var instance in DB.accountTable)
    {
        <tr id="row.@instance.id">
            <td><input id="row.cb.@instance.id" type="checkbox" @onchange="() => cbxSelected(instance.id)" /></td>
            <td>
                <table>
                    <tr><td style="padding:0px;"><h4>@instance.name</h4></td></tr>
                    <tr><td style="padding:0px;"><h4>£@instance.balance</h4></td></tr>
                </table>
            </td>
            <td><h6>@instance.type</h6></td>
        </tr>
    }
</table>
<ModalDialog @ref="@mdAddAccount" Title="Add Account">
    <div class="row" style="margin-left:10px;margin-right:10px;">
        <label for="tbName" class="mdLbl">Name</label>
        <input id="tbName" @bind="@newName"/>
        <label for="tbInterestRate" class="mdLbl">Interest Rate</label>
        <input id="tbInterestRate" type="number" @bind="@newInterestRate"/>
        <label for="ddType" class="mdLbl">Type</label>
        <select id="ddType" @bind="@newType">
            <option value="Current">Current Account</option>
            <option value="Savings">Savings Account</option>
        </select>
        <hr>
        <label for="tbBalance" class="mdLbl">Balance</label>
        <input id="tbBalance" type="number" @bind="@newBalance"/>
        <div class="btn-group" role="toolbar" style="margin-top:15px;padding:12px;">
            <button class="btn-primary" style="border-bottom-left-radius: 5px;border-top-left-radius: 5px;width:50%;" @onclick="NewAccount">Add</button>
            <button class="btn btn-outline-secondary" @onclick="() => mdAddAccount.Close()" style="border-bottom-right-radius: 5px;border-top-right-radius: 5px;">Close</button>
        </div>
    </div>
</ModalDialog>
<ModalDialog @ref="@mdUpdateAccount" Title="Update Account">
    <div class="row" style="margin-left:10px;margin-right:10px;">
        <label for="tbName" class="mdLbl">Name</label>
        <input id="tbName" @bind="@updName" />
        <label for="tbInterestRate" class="mdLbl">Interest Rate</label>
        <input id="tbInterestRate" type="number" @bind="@updInterestRate" />
        <label for="ddType" class="mdLbl">Type</label>
        <select id="ddType" @bind="@updType">
            <option value="Current">Current Account</option>
            <option value="Savings">Savings Account</option>
        </select>
        <hr>
        <label for="tbBalance" class="mdLbl">Balance</label>
        <input id="tbBalance" type="number" @bind="@updBalance" />
        <div class="btn-group" role="toolbar" style="margin-top:15px;padding:12px;">
            <button class="btn-primary" style="border-bottom-left-radius: 5px;border-top-left-radius: 5px;width:50%;" @onclick="NewAccount">Add</button>
            <button class="btn btn-outline-secondary" @onclick="() => mdUpdateAccount.Close())" style="border-bottom-right-radius: 5px;border-top-right-radius: 5px;">Close</button>
        </div>
    </div>
</ModalDialog>
@code {
    private ModalDialog mdAddAccount { get; set; }
    private ModalDialog mdUpdateAccount { get; set; }
    private List<Account> toRemove { get; set; }
    private void cbxSelected(long accountID)
    {
        if (toRemove.Contains(new Account() { id = accountID }))
        {
            toRemove.Remove(toRemove.Find(x => x.id == accountID));
        }
        else
        {
            toRemove.Add(toRemove.Find(x => x.id == accountID));
        }
    }
    private string newName { get; set; }
    private double newInterestRate { get; set; }
    private double newBalance { get; set; }
    private string newType { get; set; }
    private long updID { get; set; }
    private string updName { get; set; }
    private double updInterestRate { get; set; }
    private double updBalance { get; set; }
    private string updType { get; set; }
    private void NewAccount()
    {
        Account newAccount = new Account { name = newName, balance = newBalance, interestRate = newInterestRate, type = newType};
        DB.accountTable.Add(newAccount);
        SQLite.writeData();
        mdAddAccount.Close();
        StateHasChanged();
    }
    private void DeleteSelected()
    {
        foreach(var account in toRemove)
        {
            SQLite.deleteItem(account);
        }
        toRemove.Clear();
        StateHasChanged();
    }
    private void UpdateAccount()
    {
        Account updAccount = new Account { name = updName, balance = updBalance, interestRate = updInterestRate, type = updType, id = updID };
        SQLite.updateItem(updAccount);
        mdUpdateAccount.Close();
        StateHasChanged();
    }
    private void prepUpdate()
    {
        if(toRemove.Count==1)
        {
            updID = toRemove[0].id;
            updName = toRemove[0].name;
            updBalance = toRemove[0].balance;
            updInterestRate = toRemove[0].interestRate;
            updType = toRemove[0].type;
            mdUpdateAccount.Open();
        }
    }
}
