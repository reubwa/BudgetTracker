@page "/goals"
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>Goals</PageTitle>
<h3>Goals</h3>
<style>
    td, table {
        padding: 7px;
    }

    button {
        border: none;
        padding: 7px;
    }

    input, select {
        margin-bottom: 15px;
        height: 30px;
    }

    .mdLbl {
        margin-bottom: 5px;
    }
</style>
<div class="btn-group" role="toolbar">
    <button class="btn-primary" style="border-bottom-left-radius: 5px;border-top-left-radius: 5px;" @onclick="PrepareAdd">Add</button>
    <button class="btn-info" @onclick="() => Globals.mdPredictor.Open()">Predictor</button>
    <button class="btn-secondary" @onclick="PrepareUpdate">Update</button>
    <button class="btn-danger" style="border-bottom-right-radius: 5px;border-top-right-radius: 5px;" @onclick="DeleteSelected">Delete</button>
</div>
<table>
    @foreach(var instance in DB.goalTable)
    {
        <tr id="row.@instance.id">
            <td><input id="row.cb.@instance.id" type="checkbox" @onchange="() => cbxSelected(instance.id)" /></td>
            <td><h4>@instance.name</h4></td>
        </tr>
    }
</table>
<ModalDialog @ref="@Globals.mdAddGoal" Title="Add Goal">
    <div class="row" style="margin-left:10px;margin-right:10px;">
        <label for="tbName" class="mdLbl">Name</label>
        <input id="tbName" @bind="@Globals.newName"/>
        <label for="tbAmount" class="mdLbl">Amount</label>
        <input id="tbAmount" type="number" @bind="@Globals.newOrigAmount"/>
        <label for="dpBy" class="mdLbl">By</label>
        <input id="dbBy" type="date" @bind="@Globals.newDateTime"/>
        <div class="btn-group" role="toolbar" style="margin-top:15px;padding:12px;">
            <button class="btn-primary" style="border-bottom-left-radius: 5px;border-top-left-radius: 5px;width:50%;" @onclick="NewGoal">Add</button>
            <button class="btn btn-outline-secondary" @onclick="() => Globals.mdAddGoal.Close())" style="border-bottom-right-radius: 5px;border-top-right-radius: 5px;">Close</button>
        </div>
    </div>
</ModalDialog>
<ModalDialog @ref="@Globals.mdUpdateGoal" Title="Update Goal">
    <div class="row" style="margin-left:10px;margin-right:10px;">
        <label for="tbName" class="mdLbl">Name</label>
        <input id="tbName" @bind="@Globals.newName" />
        <label for="tbAmount" class="mdLbl">Amount</label>
        <input id="tbAmount" type="number" @bind="@Globals.newOrigAmount" />
        <label for="dpBy" class="mdLbl">By</label>
        <input id="dbBy" type="date" @bind="@Globals.newDateTime" />
        <div class="btn-group" role="toolbar" style="margin-top:15px;padding:12px;">
            <button class="btn-primary" style="border-bottom-left-radius: 5px;border-top-left-radius: 5px;width:50%;" @onclick="UpdateGoal">Add</button>
            <button class="btn btn-outline-secondary" @onclick="() => Globals.mdUpdateGoal.Close()" style="border-bottom-right-radius: 5px;border-top-right-radius: 5px;">Close</button>
        </div>
    </div>
</ModalDialog>
<ModalDialog @ref="@Globals.mdPredictor" Title="Predictor">
    <div class="row" style="margin-left:10px;margin-right:10px;">
        <h4>You'll reach your goal on time if you add at least £0 per month until then</h4>
        <button class="btn btn-outline-secondary" @onclick="() => Globals.mdPredictor.Close()" style="border-bottom-right-radius: 5px;border-top-right-radius: 5px;">Close</button>
    </div>
</ModalDialog>
@code {

    public static class Globals
    {
        public static BudgetTracker.Components.ModalDialog mdAddGoal { get; set; }
        public static BudgetTracker.Components.ModalDialog mdUpdateGoal { get; set; }
        public static BudgetTracker.Components.ModalDialog mdPredictor { get; set; }
        public static List<BudgetTracker.Goal> toRemove { get; set; }
        public static long updID { get; set; }
        public static string newName { get; set; }
        public static double newAmount { get; set; }
        public static string newOrigAmount { get; set; }
        public static DateTime newDateTime { get; set; }
    }
    private void cbxSelected(long goalID)
    {
        if (Globals.toRemove.Contains(new Goal() { id = goalID }))
        {
            Globals.toRemove.Remove(Globals.toRemove.Find(x => x.id == goalID));
        }
        else
        {
            Globals.toRemove.Add(Globals.toRemove.Find(x => x.id == goalID));
        }
    }
    private void DeleteSelected()
    {
        foreach(var goal in Globals.toRemove)
        {
            SQLite.deleteItem(goal);
        }
        Globals.toRemove.Clear();
        StateHasChanged();
    }
    private void PrepareAdd()
    {
        Globals.newAmount = double.Parse(Globals.newOrigAmount);
        Globals.mdAddGoal.Open();
    }
    private void NewGoal()
    {
        Goal goal = new Goal() {name=Globals.newName,amount=Globals.newAmount,targetDate=Globals.newDateTime };
        DB.goalTable.Add(goal);
        SQLite.writeData();
        Globals.mdAddGoal.Close();
        StateHasChanged();
    }
    private void PrepareUpdate()
    {
        if(Globals.toRemove.Count==1)
        {
            Globals.updID = Globals.toRemove[0].id;
            Globals.newName = Globals.toRemove[0].name;
            Globals.newAmount = Globals.toRemove[0].amount;
            Globals.newDateTime = Globals.toRemove[0].targetDate;
            Globals.mdUpdateGoal.Open();
        }
    }
    private void UpdateGoal()
    {
        Goal goal = new Goal() { name = Globals.newName, amount = Globals.newAmount, targetDate = Globals.newDateTime };
        SQLite.updateItem(goal);
        Globals.mdUpdateGoal.Close();
        StateHasChanged();
    }
}
